#define M_PI 3.1415926535897932384626433832795

layout( local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

struct PositionParameters {
    vec4 Part0; // LocalCenter, SpawnAngle, SpawnAngleVar, SpawnArea
    vec4 Part1; // SpawnAreaWidth, SpawnAreaWidthVar, SpawnAreaHeight, SpawnAreaHeightVar
};

struct Parameters {
   vec4 Part0; // Life, LifeVar, Delay, DelayVar
   vec4 Part1; // Speed, SpeedVar, EndSpeedFactor, EndSpeedFactorVar
   vec4 Part2; // Scale, ScaleVar, EndScale, EndScaleVar
   vec4 Part3; // UpdateScale, Direction, DirectionVar, MoveFromCenter
   vec4 Part4; // HorizontalAcc, HorizontalAccVar, VerticalAcc, VerticalAccVar
   vec4 Part5; // CentripetalAcc, CentripetalAccVar, TangentialAcc, TangentialAccVar
   vec4 Part6; // Rotation, RotationVar, RotationSpeed, RotationSpeedVar
   vec4 Part7; // RotationAcc, RotationAccVar, RotatedForward, UpdateColor
   vec4 Part8; // ColorR, ColorRVar, ColorG, ColorGVar
   vec4 Part9; // ColorB, ColorBVar, EndColorR, EndColorRVar
   vec4 Part10; // EndColorG, EndColorGVar, EndColorB, EndColorBVar
   vec4 Part11; // Alpha, AlphaVar, EndAlpha, EndAlphaVar
   vec4 Part12; // UpdateAlpha, PADDING, PADDING, PADDING
};

struct Render {
   vec4 Part0; // PosX, PosY, Scale, Rotation
   vec4 Part1; // ColorR, ColorG, ColorB, ColorA
};

struct Update {
   vec4 Part0; // CenterX, CenterY, Initialized, Delay
   vec4 Part1; // Life, EndSpeedFactor, DeltaX, DeltaY
   vec4 Part2; // HorizontalAcc, VerticalAcc, CentripetalAcc, TangentialAcc
   vec4 Part3; // RotatedForward, RotationAcceleration, DeltaRotation, DeltaScale
   vec4 Part4; // DeltaColorR, DeltaColorG, DeltaColorB, DeltaColorA,
   vec4 Part5; // Time, ExternalSpeedX, ExternalSpeedY, PADDING
};

layout(binding = 0) uniform atomic_uint atomicCounter;

layout (std140, binding = 1) buffer Input0 {
   PositionParameters positionParameters;
};

layout (std140, binding = 2) buffer Input1 {
   Parameters parameters;
};

layout (std140, binding = 3) buffer Input2 {
   Render renderInput[];
};

layout (std140, binding = 4) buffer Input3 {
   Update updateInput[];
};

layout (std140, binding = 5) buffer Output1 {
   Render renderOutput[];
};

layout (std140, binding = 6) buffer Output2 {
   Update updateOutput[];
};

uniform int randomSeed;
uniform float deltaTime;
uniform int particleCount;
uniform int particlesInGpu;

uniform vec2 position;
uniform vec2 externalAcceleration;

uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

float randomFloat(uint seed) {
	return float(wang_hash(seed)) * (1.0 / 4294967296.0);
}

float random11(uint seed) {
	return 2 * randomFloat(seed) - 1;
}

void positionInRectangleArea(inout Render r, inout uint seed, float centerX, float centerY, float angleRadians) {
    float spawnAreaWidth = positionParameters.Part1[0];
    float spawnAreaWidthVar = positionParameters.Part1[1];
    float spawnAreaHeight = positionParameters.Part1[2];
    float spawnAreaHeightVar = positionParameters.Part1[3];

    // Create a circle that is touching the corners of the rectangle
    float radius = sqrt(spawnAreaWidth * spawnAreaWidth + spawnAreaHeight * spawnAreaHeight);
    float posX = cos(angleRadians) * radius;
    float posY = -sin(angleRadians) * radius;

    // Cut the circle horizontally and vertically from the rectangle corners.
    if (abs(posX) > spawnAreaWidth)
        posX = posX < 0 ? -spawnAreaWidth : spawnAreaWidth;
    if (abs(posY) > spawnAreaHeight)
        posY = posY < 0 ? -spawnAreaHeight : spawnAreaHeight;

    // Randomize based on variation
    posX += spawnAreaWidthVar * random11(++seed);
    posY += spawnAreaHeightVar * random11(++seed);

    r.Part0[0] = centerX + posX;
    r.Part0[1] = centerY + posY;
}

void positionInEllipseArea(inout Render r, inout uint seed, float centerX, float centerY, float angleRadians) {
    float spawnAreaWidth = positionParameters.Part1[0];
    float spawnAreaWidthVar = positionParameters.Part1[1];
    float spawnAreaHeight = positionParameters.Part1[2];
    float spawnAreaHeightVar = positionParameters.Part1[3];

    // Randomize radius based on variation
    float width = spawnAreaWidth + spawnAreaWidthVar * random11(++seed);
    float height = spawnAreaHeight + spawnAreaHeightVar * random11(++seed);

    // Create an ellipse
    float posX = cos(angleRadians) * width;
    float posY = -sin(angleRadians) * height;

    r.Part0[0] = centerX + posX;
    r.Part0[1] = centerY + posY;
}

void applyPositionParameters(inout Render r, inout Update u, inout uint seed) {
    float x = position.x;
    float y = position.y;
    float angle = positionParameters.Part0[1] - positionParameters.Part0[2] * random11(++seed) - 90;
    float angleRadians = angle * M_PI / 180.0;

    float spawnArea = positionParameters.Part0[3];
    if(spawnArea == 0) {
        positionInRectangleArea(r, seed, x, y, angleRadians);
    } else {
        positionInEllipseArea(r, seed, x, y, angleRadians);
    }

    if (positionParameters.Part0[0] != 0) {
        u.Part0[1] = r.Part0[0];
        u.Part0[2] = r.Part0[1];
    } else {
        u.Part0[1] = x;
        u.Part0[2] = y;
    }
}

void applyParameters(inout Render r, inout Update u, inout uint seed) {
    float life = parameters.Part0[0];
    float lifeVar = parameters.Part0[1];
    float delay = parameters.Part0[2];
    float delayVar = parameters.Part0[3];

    float speed = parameters.Part1[0];
    float speedVar = parameters.Part1[1];
    float endSpeedFactor = parameters.Part1[2];
    float endSpeedFactorVar = parameters.Part1[3];

    float scale = parameters.Part2[0];
    float scaleVar = parameters.Part2[1];
    float endScale = parameters.Part2[2];
    float endScaleVar = parameters.Part2[3];

    float updateScale = parameters.Part3[0];
    float direction = parameters.Part3[1];
    float directionVar = parameters.Part3[2];
    float moveFromCenter = parameters.Part3[3];

    float horizontalAcc = parameters.Part4[0];
    float horizontalAccVar = parameters.Part4[1];
    float verticalAcc = parameters.Part4[2];
    float verticalAccVar = parameters.Part4[3];

    float centripetalAcc = parameters.Part5[0];
    float centripetalAccVar = parameters.Part5[1];
    float tangentialAcc = parameters.Part5[2];
    float tangentialAccVar = parameters.Part5[3];

    float rotation = parameters.Part6[0];
    float rotationVar = parameters.Part6[1];
    float rotationSpeed = parameters.Part6[2];
    float rotationSpeedVar = parameters.Part6[3];

    float rotationAcc = parameters.Part7[0];
    float rotationAccVar = parameters.Part7[1];
    float rotatedForward = parameters.Part7[2];
    float updateColor = parameters.Part7[3];

    float colorR = parameters.Part8[0];
    float colorRVar = parameters.Part8[1];
    float colorG = parameters.Part8[2];
    float colorGVar = parameters.Part8[3];

    float colorB = parameters.Part9[0];
    float colorBVar = parameters.Part9[1];
    float endColorR = parameters.Part9[2];
    float endColorRVar = parameters.Part9[3];

    float endColorG = parameters.Part10[0];
    float endColorGVar = parameters.Part10[1];
    float endColorB = parameters.Part10[2];
    float endColorBVar = parameters.Part10[3];

    float alpha = parameters.Part11[0];
    float alphaVar = parameters.Part11[1];
    float endAlpha = parameters.Part11[2];
    float endAlphaVar = parameters.Part11[3];

    float updateAlpha = parameters.Part12[0];

    float posX = r.Part0[0];
    float posY = r.Part0[1];

    float centerX = u.Part0[1];
    float centerY = u.Part0[2];

    float emittedLife = life + lifeVar * random11(++seed);

    float emittedColor0 = colorR + colorRVar * random11(++seed);
    float emittedColor1 = colorG + colorGVar * random11(++seed);
    float emittedColor2 = colorB + colorBVar * random11(++seed);
    float emittedAlpha = alpha + alphaVar * random11(++seed);

    float emittedScale = scale + scaleVar * random11(++seed);

    float emittedSpeed = speed + speedVar * random11(++seed);

    float emittedCentripetalAcc = centripetalAcc + centripetalAccVar * random11(++seed);
    if (emittedCentripetalAcc != 0 && emittedSpeed == 0) {
        emittedSpeed = 1.0; // A little bump to get a direction for the velocity vector.
    }

    float velocityX = 0;
    float velocityY = 0;
    if (emittedSpeed != 0) {
        if (moveFromCenter != 0) {
            float dirX = posX - centerX;
            float dirY = posY - centerY;
            if (dirX != 0 || dirY != 0) {
                float length = sqrt(dirX * dirX + dirY * dirY);
                velocityX = (dirX / length) * emittedSpeed;
                velocityY = (dirY / length) * emittedSpeed;
            } else {
                velocityY = emittedSpeed;
            }
        } else {
            velocityY = emittedSpeed;
        }

        float direction = direction + directionVar * random11(++seed);
        float directionRadians = direction * M_PI / 180;
        float sinDir = sin(directionRadians);
        float cosDir = cos(directionRadians);
        float velocityX0 = velocityX;
        velocityX = velocityX0 * cosDir + velocityY * sinDir;
        velocityY = -velocityX0 * sinDir + velocityY * cosDir;
    }

    r.Part0[2] = emittedScale;
    r.Part0[3] = rotation + rotationVar * random11(++seed);

    r.Part1[0] = emittedColor0 / 255.0;
    r.Part1[1] = emittedColor1 / 255.0;
    r.Part1[2] = emittedColor2 / 255.0;
    r.Part1[3] = emittedAlpha;

    u.Part0[3] = delay + delayVar * random11(++seed);

    u.Part1[0] = emittedLife;
    u.Part1[1] = endSpeedFactor + endSpeedFactorVar * random11(++seed);
    u.Part1[2] = velocityX;
    u.Part1[3] = velocityY;

    u.Part2[0] = horizontalAcc + horizontalAccVar * random11(++seed);
    u.Part2[1] = verticalAcc + verticalAccVar * random11(++seed);
    u.Part2[2] = centripetalAcc;
    u.Part2[3] = tangentialAcc + tangentialAccVar * random11(++seed);

    if (rotatedForward != 0) {
        u.Part3[0] = 1;
    } else {
        u.Part3[0] = 0;
        u.Part3[1] = rotationAcc + rotationAccVar * random11(++seed);
        u.Part3[2] = rotationSpeed + rotationSpeedVar * random11(++seed);
    }

    if (updateScale != 0) {
        u.Part3[3] = (endScale + endScaleVar * random11(++seed)) / emittedLife;
    } else {
        u.Part3[3] = 0;
    }

    if (updateColor != 0) {
        u.Part4[0] = (endColorR + endColorRVar * random11(++seed) - emittedColor0) / (255 * emittedLife);
        u.Part4[1] = (endColorG + endColorGVar * random11(++seed) - emittedColor1) / (255 * emittedLife);
        u.Part4[2] = (endColorB + endColorBVar * random11(++seed) - emittedColor2) / (255 * emittedLife);
    } else {
        u.Part4[0] = 0;
        u.Part4[1] = 0;
        u.Part4[2] = 0;
    }

    if(updateAlpha != 0) {
        u.Part4[3] = (endAlpha + endAlphaVar * random11(++seed) - emittedAlpha) / emittedLife;
    } else {
        u.Part4[3] = 0;
    }

    u.Part5[0] = 0; // Time
    u.Part5[1] = 0; // External speed X
    u.Part5[2] = 0; // External speed Y
    u.Part5[3] = 0; // Custom
}

void update(inout Render r, inout Update u, inout uint seed) {
    if (u.Part0[0] == 0) {
        float time = u.Part5[0];
        float delay = u.Part0[3];
        if (time < delay) {
            u.Part5[0] += deltaTime;

            float externalSpeedX = u.Part5[1] + externalAcceleration[0] * deltaTime;
            float externalSpeedY = u.Part5[2] + externalAcceleration[1] * deltaTime;

            u.Part5[1] = externalSpeedX;
            u.Part5[2] = externalSpeedY;

            r.Part0[0] += externalSpeedX * deltaTime;
            r.Part0[1] += externalSpeedX * deltaTime;

            if (u.Part3[0] != 0) {
                if (externalSpeedX != 0 || externalSpeedY != 0) {
                    float rotation = atan(externalSpeedY, externalSpeedX);
                    r.Part0[3] = -(rotation * 180.0 / M_PI) + 90;
                }
            }

            return;
        }

        u.Part5[0] = 0;
        u.Part1[2] += u.Part5[1];
        u.Part1[3] += u.Part5[2];
        u.Part0[0] = 1;
    }

    u.Part5[0] += deltaTime;

    float posX = r.Part0[0];
    float posY = r.Part0[1];
    float centerX = u.Part0[1];
    float centerY = u.Part0[2];

    float deltaX = u.Part1[2];
    float deltaY = u.Part1[3];

    float centripetalDirX, centripetalDirY;
    if (centerX == posX && centerY == posY) {
        float direction = -atan(deltaY, deltaX);
        centripetalDirX = cos(direction);
        centripetalDirY = -sin(direction);
    } else {
        centripetalDirX = centerX - posX;
        centripetalDirY = centerY - posY;
        float distance = sqrt(centripetalDirX * centripetalDirX + centripetalDirY * centripetalDirY);
        centripetalDirX = centripetalDirX / distance;
        centripetalDirY = centripetalDirY / distance;
    }

    // Get tangential direction
    float tangentialDirX = -centripetalDirY;
    float tangentialDirY = centripetalDirX;

    // Get acceleration sums of centripetal and tangential accelerations
    float centripetalAcc = u.Part2[2];
    float tangentialAcc = u.Part2[3];
    float accSumX = centripetalDirX * centripetalAcc + tangentialDirX * tangentialAcc;
    float accSumY = centripetalDirY * centripetalAcc + tangentialDirY * tangentialAcc;

    // Update velocity
    deltaX += (accSumX + externalAcceleration[0] + u.Part2[0]) * deltaTime;
    deltaY += (accSumY + externalAcceleration[1] + u.Part2[1]) * deltaTime;
    u.Part1[2] = deltaX;
    u.Part1[3] = deltaY;

    // Update velocity factor
    float progress = u.Part5[0] / u.Part1[0];
    float velocityFactor = (1.0 - progress) + progress * u.Part1[1];

    // Update position
    float velocityFactorTimesDeltaTime = velocityFactor * deltaTime;
    r.Part0[0] = posX + deltaX * velocityFactorTimesDeltaTime;
    r.Part0[1] = posY + deltaY * velocityFactorTimesDeltaTime;

    // Update scale
    r.Part0[2] += u.Part3[3] * deltaTime;

    // Update rotation
    if (u.Part3[0] != 0) {
        if (deltaX != 0 || deltaY != 0) {
            float rotation = atan(deltaY, deltaX);
            r.Part0[3] = -(rotation * 180.0 / M_PI) + 90;
        }
    } else {
        float rotationSpeed = u.Part3[2] + u.Part3[1] * deltaTime;
        u.Part3[2] = rotationSpeed;
        r.Part0[3] += rotationSpeed * deltaTime;
    }

    // Update color
    r.Part1[0] += u.Part4[0] * deltaTime;
    r.Part1[1] += u.Part4[1] * deltaTime;
    r.Part1[2] += u.Part4[2] * deltaTime;
    r.Part1[3] += u.Part4[3] * deltaTime;
}

void main(void) {
	//uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	uint index = gl_GlobalInvocationID.x;
	
	if(index >= particleCount) {
		return;
	}
	
	Render r = renderInput[index];
	Update u = updateInput[index];
	uint seed = wang_hash(randomSeed + index);

	if(index >= particlesInGpu) {
	    u.Part0[0] = 0;
	    applyPositionParameters(r, u, seed);
        applyParameters(r, u, seed);
    }

    update(r, u, seed);

    // Update buffers if still alive
    if(u.Part5[0] <= u.Part1[0]) {
        uint newIndex = atomicCounterIncrement(atomicCounter);
        renderOutput[newIndex] = r;
        updateOutput[newIndex] = u;
    }
}